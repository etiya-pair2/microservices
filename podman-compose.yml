services:
  mysql:
    image: docker.io/library/mysql:latest
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: test
      MYSQL_DATABASE: customer_db
      MYSQL_USER: my_user
      MYSQL_PASSWORD: test
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 30s
      timeout: 10s
      retries: 5
  postgresql:
    image: docker.io/library/postgres:latest
    container_name: postgresql
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 30s
      timeout: 10s
      retries: 5
  configserver:
    image: "localhost/configserver"
    container_name: configserver
    build: ./configserver
    ports:
      - "8001:8001"
    networks:
      - common
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8888/eureka/
      - SPRING_CLOUD_CONFIG_URI=http://configserver:8001
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - SPRING_CLOUD_CONFIG_LABEL=main
    depends_on:
      - mysql
      - postgresql
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8001/actuator/health" ]
      interval: 5s
      timeout: 10s
      retries: 10

  eureka:
    image: "localhost/eurekaserver"
    container_name: eureka
    build: ./eureka #image build
    ports:
      - "8888:8888"
    networks:
      - common
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 5s
      timeout: 10s
      retries: 5


  gateway:
    image: "localhost/gateway"
    container_name: gateway
    build: ./gateway
    ports:
      - "8090:8090"
    networks:
      - common

    depends_on:
      eureka:
        condition: service_healthy



  customer:
    image: "localhost/customerservice"
    container_name: "customerservice"
    build: ./customerservice
    ports:
      - "8080:8080"
    networks:
      - common
    depends_on:
        eureka:
          condition: service_healthy
  product:
    image: "localhost/productservice"
    container_name: "productservice"
    build: ./productservice
    ports:
      - "8081:8081"
    networks:
      - common
    depends_on:
        eureka:
          condition: service_healthy

volumes:
  mysql_data:
  postgres_data:

networks:
  common:
    driver: bridge
